package DAO;

import Util.ConnectionUtil;
import Model.Message;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.sql.*;

/**
 * A class that mediates the transformation of data between the format of objects in Java to rows in a
 * database. 
 */
public class MessageDAO {

    /*
     * REFERENCE FOR AUTO INCREMENT message_id FROM MINI LIBRARY PROJECT
     * 
     * ...
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            preparedStatement.executeUpdate();
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_author_id = (int) pkeyResultSet.getLong(1);
                return new Author(generated_author_id, author.getName());
            }
       ...
     */

    /**
    * insertMessage(Message message)
    * Method for inserting message into the Message table.
    * The account_id should be automatically generated by the sql database if it is not provided because it was
    * set to auto_increment.
    * @param  message
    * @return the message inserted into the Message table
    */
    public Message insertMessage(Message message){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "INSERT INTO Message(posted_by, message_text, time_posted_epoch) values(?,?,?)" ;
            // We can see in the SocialMedia.sql file that 
            //
            // "   create table message (
            //     message_id int primary key auto_increment,
            //     posted_by int,
            //     message_text varchar(255),
            //     time_posted_epoch bigint,
            //     foreign key (posted_by) references  account(account_id)
            // );" Meaning the message_id should be auto incremented when we insert a new Message into the table
    
            //Second part of the ps is for the generated message_id
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setInt(1, message.getPosted_by());
            preparedStatement.setString(2, message.getMessage_text());
            preparedStatement.setLong(3, message.getTime_posted_epoch());

            preparedStatement.executeUpdate();

            //Auto increment account_id !!!
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_message_id = (int) pkeyResultSet.getLong(1);
                return new Message(generated_message_id, message.getPosted_by(), message.getMessage_text(),message.getTime_posted_epoch());
            }
            //return message;
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Retrieve all messages from the Message table.
     * @return all Messages.
     */
    public List<Message> getAllMessages(){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();
        try {
            String sql = "SELECT * FROM Message";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                messages.add(message);
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return messages;
    }

    /**
     * getMessagebyMessageId(int message_id)
     * Retrieve a message from the Message table given message_id.
     * @return message with the given message_id.
     */
    public Message getMessagebyMessageId(int message_id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM Message WHERE message_id=?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1,message_id);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                return message;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * deleteMessagebyMessageId(message_id)
     * Delete a message from the Message table given message_id.
     * @return deleted message.
     */
    public Message deleteMessagebyMessageId(int message_id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "DELETE * FROM Message WHERE message_id=?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1,message_id);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                return message;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * updateMessagebyMessageId(message_id, message_text)
     * Update a message from the Message table given message_id.
     * @return updated message.
     */
    public Message updateMessagebyMessageId(int message_id, String message_text){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "UPDATE Message SET message_text= ? WHERE message_id=?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, message_text);
            preparedStatement.setInt(2,message_id);


            preparedStatement.executeUpdate();
            return getMessagebyMessageId(message_id);
            
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * getAllMessagesbyAccountId(account_id)
     * Retrieve a message from the Message table given account_id.
     * @return message with the given account_id.
     */
    public List<Message> getAllMessagesbyAccountId(int account_id){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();
        try {
            // We are trying to retrieve the messages from an account using the account_id which is a foreign key 
            // in the Messages table
            // We should JOIN Messages and Account tables on account_id
            String sql = "SELECT * FROM Message JOIN Account ON account_id = message_id WHERE account_id= ? ";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1,account_id);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                messages.add(message);
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return messages;
    }

}

    

