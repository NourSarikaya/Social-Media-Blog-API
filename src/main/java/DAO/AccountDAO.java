package DAO;

import Model.Account;
import Util.ConnectionUtil;

import java.sql.*;

/**
 * A class that mediates the transformation of data between the format of objects in Java to rows in a
 * database. 
 */
public class AccountDAO {

    /*
     * REFERENCE FROM MINI LIBRARY PROJECT
     * Referenced the following method:
    public Book getBookByIsbn(int isbn){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM Book WHERE isbn = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write preparedStatement's setInt method here.
            preparedStatement.setInt(1,isbn);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Book book = new Book(rs.getInt("isbn"),
                        rs.getInt("author_id"),
                        rs.getString("title"),
                        rs.getInt("copies_available"));
                return book;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }
    */
    

    /**
    * getAccountByUsername()
    * Method for retrieving an account with the given username from the database
    * @param  username
    * @return an account identified by username.
    */
    public Account getAccountByUsername(String username){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM Account WHERE username = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setString(1,username);

            ResultSet rs = preparedStatement.executeQuery();
            
            while(rs.next()){
                //Utilizing the constructor for retrieving an account from the database
                Account account = new Account(rs.getInt("account_id"),
                        rs.getString("username"),
                        rs.getString("password")); 
                return account;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
    * getAccountByUsernamePassword()
    * Method for retrieving an account with the given password from the database
    * @param  password
    * @return an account identified by password.
    */
    public Account getAccountByUsernamePassword(String username,String password){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM Account WHERE username= ? AND password = ?";
            // One bug I had was not using the "AND" keyword and instead using a comma between two conditions

            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setString(1,username);
            preparedStatement.setString(2,password);

            ResultSet rs = preparedStatement.executeQuery();
            
            while(rs.next()){
                //Utilizing the constructor for retrieving an account from the database
                Account account = new Account(rs.getInt("account_id"),
                        rs.getString("username"),
                        rs.getString("password")); 
                return account;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
    * getAccountByAccountid()
    * Method for retrieving an account with the given account_id from the database
    * @param  account_id
    * @return an account identified by account_id.
    */
    public Account getAccountByAccountid(int account_id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM Account WHERE account_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setInt(1,account_id);

            ResultSet rs = preparedStatement.executeQuery();
            
            while(rs.next()){
                //Utilizing the constructor for retrieving an account from the database
                Account account = new Account(rs.getInt("account_id"),
                        rs.getString("username"),
                        rs.getString("password")); 
                return account;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

   
    /**
    * insertAccount()
    * Method for inserting account into the Account table.
    * The account_id should be automatically generated by the sql database if it is not provided because it was
    * set to auto_increment.
    * @param  account
    * @return the account inserted into the Account table
    */
    public Account insertAccount(Account account){
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "INSERT INTO Account(username, password) values(?,?)" ;
            //Second part of the ps is for the generated account_id
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());

            preparedStatement.executeUpdate();

            //Auto increment account_id !!!
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_account_id = (int) pkeyResultSet.getLong(1);
                return new Account(generated_account_id, account.getUsername(), account.getPassword());
            }
            //return account;
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }
}
